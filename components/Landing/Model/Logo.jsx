/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, } from "@react-three/drei";

export function Model(props) {
	const { nodes, materials } = useGLTF("/models/logo.glb");

	const ref = useRef();
	// Hold state for hovered and clicked events
	const [hovered, hover] = useState(false);
	const [clicked, click] = useState(false);

	// Subscribe this component to the render-loop, rotate the mesh every frame
	useFrame((state, delta) => !hovered && (ref.current.rotation.y += delta / 1.2));

	const materialProps = {
		thickness: 1.6,
		roughness: 0,
		clearcoat: 0,
		clearcoatRoughness: 1,
		transmission: 0.98,
		ior: 13,
		envMapIntensity: 1,
		color: "#ffffff",
		attenuationTint: "#c10000",
		attenuationDistance: 1,
	};

	// const materialProps = {
	// 	thickness: 0,
	// 	roughness: 0,
	// 	clearcoat: 1,
	// 	clearcoatRoughness: 1,
	// 	transmission: 0,
	// 	ior: 16,
	// 	envMapIntensity: 0,
	// 	color: "#ffffff",
	// 	attenuationTint: "#ebebeb",
	// 	attenuationDistance: 0,
	// };

	return (
		<group
			{...props}
			dispose={null}>
			<group>
				<mesh
					ref={ref}
					castShadow
					receiveShadow
					geometry={nodes.Mesh_0.geometry}
					rotation={[0, 0, Math.PI]}
					scale={1.57379186 * 5}
					onClick={(event) => click(!clicked)}
					onPointerOver={(event) => hover(true)}
					onPointerOut={(event) => hover(false)}>
					<meshPhysicalMaterial {...materialProps} />
				</mesh>
			</group>
		</group>
	);
}

useGLTF.preload("/models/logo.glb");
